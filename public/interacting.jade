.toc.col-sm-3!=partial('./_guide-nav')

.contents.col-sm-9
  :markdown

    #Interacting

    If you done the basics section you can now animate all kinds of things.
    But the animations still don't flow smoothly from your movements, they
    animate from a fixed position, to a fixed position, at a fixed velocity.

    ##Dragging

    What if we want to drag our ball from the first section around?

    ```javascript
      ball.drag()
    ```

    All we have to do is call `.drag`.  Now the user can drag the ball around.
    If we want to only allow the user to drag the ball in a certain area,
    we can create a boundry for it.

    ```javascript
      var boundry = Impulse.Boundry({
        top: 0,
        left: 0,
        bottom: 100,
        right: 100
      })
      ball.drag({ boundry: boundry })
    ```

    Now the ball is restricted to a small area. Next we'll see how to follow
    the interaction up with an animation.

  != partial('./_codepen', { title: 'Dragging', slug: 'kGbzI' })

  :markdown
    ##Animating after Interacting

    While you were interacting with the ball, Impulse was calculating and storing the
    velocity and position of your interaction.  So once the user let's go, you can
    animate from the last position and velocity.

    ```javascript
      var boundry = Impulse.Boundry({
        top: 0,
        left: 0,
        bottom: 1000,
        right: 1000
      })
      ball.drag({ boundry: boundry })
        .on('end', function() {
          ball.spring().to(boundry)
        })
    ```

    This will cause the ball to spring to the boundry when the user stops dragging it.

  != partial('./_codepen', { title: 'Animating after Drag', slug: 'ejtry' })
